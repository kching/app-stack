// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  uid            String         @unique @default(cuid())
  enabled        Boolean        @default(true)
  lastAccessedAt DateTime?
  displayName    String         @default("")
  authSchemes    AuthScheme[]
  contacts       Contact[]
  subscriptions  Subscription[]
  memberOf       UserGroup[]
  createdByUid   String
  createdAt      DateTime       @default(now())
}

model Group {
  id          Int         @id @default(autoincrement())
  uid         String      @unique @default(cuid())
  label       String
  description String?
  members     UserGroup[]
  createdById Int
  createdAt   DateTime    @default(now())
}

model UserGroup {
  id          Int      @id @default(autoincrement())
  userId      Int
  groupId     Int
  createdById Int
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  group       Group    @relation(fields: [groupId], references: [id])
}

model Permission {
  id        Int    @id @default(autoincrement())
  uid       String @unique @default(cuid())
  principal String // either users/<cuid> or groups/<cuid>
  resource  String // <resourceType>/<cuid> | *
  values    Int // bitmast of execute|delete|update|create|read

  @@unique([principal, resource], name: "searchBy")
}

model Contact {
  id       Int     @id
  uid      String  @unique @default(cuid())
  userId   Int
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel  String
  address  String
  verified Boolean @default(false)
}

model AuthScheme {
  id           Int     @id @default(autoincrement())
  userId       Int
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  scheme       String
  username     String
  secret       String
  pendingReset Boolean @default(false)

  @@unique([scheme, username])
  @@unique([scheme, userId])
}

model ExpiredToken {
  token        String   @id
  expiredSince DateTime @default(now())
}

model Subscription {
  id      Int     @id
  userId  Int
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  event   String
  channel String
  enabled Boolean
}

model MessageOutBox {
  id           Int       @id @default(autoincrement())
  templateName String
  channelName  String
  data         String
  address      String
  sentAt       DateTime  @default(now())
  lastSentAt   DateTime?
  status       String    @default("pending")
  errorCount   Int       @default(0)
}

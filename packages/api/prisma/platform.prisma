// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/platformClient"
}

datasource db {
  provider = "sqlite"
  url      = env("PLATFORM_DB_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  uid            String       @unique @default(cuid())
  enabled        Boolean      @default(true)
  lastAccessedAt DateTime?
  displayName    String       @default("")
  authSchemes    AuthScheme[]
  contacts       Contact[]
  memberOf       UserGroup[]
  createdByUid   String
  createdAt      DateTime     @default(now())
}

model Group {
  id           Int         @id @default(autoincrement())
  uid          String      @unique @default(cuid())
  label        String
  description  String?
  members      UserGroup[]
  createdByUid String
  createdAt    DateTime    @default(now())
}

model UserGroup {
  id           Int      @id @default(autoincrement())
  uid          String   @unique @default(cuid())
  userId       Int
  groupId      Int
  createdByUId String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group        Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model SecurityPolicy {
  id          Int    @id @default(autoincrement())
  uid         String @unique @default(cuid())
  principal   String // either user:<cuid> or group:<cuid>
  resource    String // <resourceType>/<cuid> | *
  permissions Int

  @@unique([principal, resource])
}

model Contact {
  id            Int             @id @default(autoincrement())
  userId        Int
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  uid           String          @unique @default(cuid())
  ownerUid      String
  channel       String
  address       String
  secret        String? // some channels may require authentication ie. Telegram
  verified      Boolean         @default(false)
  primary       Boolean         @default(false)
  Subscription  Subscription[]
  MessageOutBox MessageOutBox[]

  @@unique([ownerUid, channel, address])
}

model AuthScheme {
  id           Int     @id @default(autoincrement())
  userId       Int
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  scheme       String
  username     String
  secret       String
  pendingReset Boolean @default(false)

  @@unique([scheme, username])
  @@unique([scheme, userId])
}

model Subscription {
  id           Int     @id @default(autoincrement())
  uid          String  @default(cuid())
  ownerUid     String
  event        String
  enabled      Boolean
  displayOrder Int
  contactId    Int
  contact      Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique(fields: [contactId, event])
  @@index([enabled, event])
}

model MessageOutBox {
  id         Int       @id @default(autoincrement())
  eventName  String
  data       String
  sentAt     DateTime  @default(now())
  lastSentAt DateTime?
  status     String    @default("pending")
  errorCount Int       @default(0)
  contactId  Int
  contact    Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([sentAt])
}

model Preference {
  id        Int    @id @default(autoincrement())
  uid       String @unique @default(cuid())
  ownerUid  String // user:<uid> or group:<uid>
  namespace String
  attribute String
  type      String // 'string' | 'number' | 'boolean' | 'object'
  value     String

  @@unique([ownerUid, namespace, attribute])
}
